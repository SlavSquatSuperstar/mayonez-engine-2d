import org.gradle.internal.os.OperatingSystem

plugins {
    id 'idea'
    id 'java-library'

    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow'
}

description = 'The library project for Mayonez Engine that contains the core classes and unit tests.'

// Configure LWJGL OS (source: https://github.com/azurite-engine/Azurite)
def osArch = System.getProperty("os.arch")
switch (OperatingSystem.current()) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = osArch.contains("arm") ? "natives-macos-arm64" :
                "natives-macos"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
}

dependencies {
    // Code Dependencies
    api 'org.jetbrains.kotlin:kotlin-stdlib:1.8.0'
    implementation 'org.json:json:20220924'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.slf4j:slf4j-simple:1.7.32' // Don't update, required by reflections

    // LWJGL Libraries
    implementation platform('org.lwjgl:lwjgl-bom:3.3.1')

    api 'org.joml:joml:1.10.5'
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    // Test Libraries
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-api:5.9.1'
}

// Tasks

compileJava {
    dependsOn compileKotlin
    sourceCompatibility = targetCompatibility = project.javaVersion
}

compileKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
        suppressWarnings = true
        destinationDirectory = compileJava.destinationDirectory
    }
}

test {
    useJUnitPlatform()
}