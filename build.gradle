import org.gradle.internal.os.OperatingSystem

buildscript {
    project.ext.kotlinVersion = '1.6.10'
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2' // For making fat jars

    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.dokka' version '1.6.10' // For Kotlin documentation

    id 'java'
    id 'application'
}

// Project Info

group 'slavsquatsuperstar'
version '0.7.3-SNAPSHOT-1'
description = 'The root project for MayonezEngine that contains library classes, demo projects, and unit tests'

// Custom Settings
project.ext {
    javaVersion = '17'
    lwjglVersion = '3.3.0'
    junitVersion = '5.8.2'
    mainClass = 'slavsquatsuperstar.demos.GLRendererTest'
}

sourceCompatibility = javaVersion

// Configure LWJGL OS (source: https://github.com/azurite-engine/Azurite)
def osArch = System.getProperty("os.arch")
switch (OperatingSystem.current()) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
    case OperatingSystem.MAC_OS:
        run.jvmArgs = ["-XstartOnFirstThread"] // For LWJGL on macOS
        project.ext.lwjglNatives = osArch.contains("arm") ? "natives-macos-arm64" :
                "natives-macos"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
}

// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    // Code Dependencies
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.10'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.json:json:20211205'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.slf4j:slf4j-simple:1.7.32'

    // LWJGL Libraries
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:1.10.2"

    // Test Libraries
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"
}

// Tasks and Plugins

compileKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
        suppressWarnings = true
    }
}

application { // For 'run' task
    mainClass = project.ext.mainClass
    // set mainModule
}

jar {
    manifest.attributes('Main-Class': project.ext.mainClass)
    // 'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
}


shadowJar {
    dependsOn jar
    archiveClassifier.set('')
    manifest.from jar.manifest
    exclude 'META-INF/*.txt',
            'META-INF/*.SF',
            'META-INF/*.DSA',
            'META-INF/*.RSA',
            'META-INF/*.LIST'
}

test {
    useJUnitPlatform()
}